---
title: "Collaborating with GitHub"
format: html
---

## Objective

Learners will fork and clone a repository on GitHub and use branches to open pull requests.

## Lesson Outline

-   Review Homework:

    -   Anyone put a repo on GitHub? Any difficulties encountered?

-   Live Coding: Collaborating with GitHub

    -   Share a repo with everyone & have everyone clone w/ RStudio
    -   Ask 1 (one) volunteer to make a change and practice commit + push
    -   Instructor makes commit + push, volunteer pulls

-   Live Coding: Merge conflict

    -   Instructor makes commit to README and pushes to GitHub
    -   Volunteer makes commit to the same line of README and pushes **without pulling first**
    -   Should error for volunteer

-   Slides: Resolving merge conflict

-   Live Coding: Resolve merge conflict

    -   Try following the hints in the error and `pull`
    -   New error about divergent branches
    -   Then have everyone set `git config pull.rebase false`

-   Working on branches (slides)

-   Live Coding:

    -   Make a branch with your name in RStudio
    -   Add your name to README and commit
    -   Switch between branches and see the file change in RStudio AND in File Explorer / Finder
    -   Push & see branches on GitHub

-   Pull Requests (slides)

-   Live Coding:

    -   Have everyone make a PR to add their name to the README
    -   Demo merging one or two & ask volunteer to resolve any merge conflicts

-   Forks (slides)

    -   Discuss when you would work on a branch of a fork vs. working in a branch but on the same repo

-   Live Coding:

    -   Have students create a fork of a second example repo and clone their fork
    -   In pairs, have them practice making a branch, making changes, commit + push, and make a PR on GitHub

-   Homework:

    -   Maybe try cloning a repo that you don't have permission to push to to see what happens

    -   Try using `usethis::pr_finish()` on a branch that was already merged on GitHub and take note of what it does

```{=html}
<!-- old notes

## Installation & materials

1.  [Slides](https://docs.google.com/presentation/d/1oKZ2VK50_CW90Um_iOJ8D6KEPgvapqYvXBFMlx0_aiw/edit)
2.  Workshop [repository](https://github.com/az-digitalag/data-sci-workshop)
3.  [Software Carpentry Version Control with Git episode #8](https://swcarpentry.github.io/git-novice/08-collab)

### Review

If anyone connected a local repository to GitHub, share how that went.
Ask students to navigate to previous repository, amend an existing file, and practice an add-commit-push cycle.

### Modifications

-   The only part of #8 that was taught was cloning a forked repository. Ask students to fork an instructor-created repository, then clone locally. This will be the repo for downstream files.
-   Use `git remote add upstream xxxx` to connect repo to upstream. If time permits, demonstrate a pull request (PR).
-   Share [diagram](https://www.tomasbeuzen.com/post/git-fork-branch-pull/) of relationships between the remotes (upstream and origin) and local
-   Demonstrate pull requests on GitHub
-   Show how distinct units of work can be separately submitted via branches

## Teaching notes

-   Have students fork a `cct-datascience` repo as an example of a real research compendium
-   Easy to check on learner progress by looking for who has and hasn't forked repo

## Homework

Skim the **Analyses** section of [tidyverse R style guide](https://style.tidyverse.org).
What practice or guideline was new to you?

Also, explore the upstream `cct-datascience` repo.
What practices do you notices that are new or different from your own?
-->
```
<!--# practice making a reprex and pasting into Slack? -->
