---
title: "Data manipulation with `dplyr` and `tidyr`"
subtitle: "Session 7"
date: "2024-09-24"
date-format: long
format:
  uaz-revealjs:
    reference-location: document
    link-external-newwindow: true
    chalkboard: true
    logo: "../../logo.png"
    footer: "[Reproduciblity & Data Science in R](../../index.html)"
---

## Review

::: callout-note
## Informal poll:

Do you collaborate with anyone who could or currently uses GitHub?
:::

## Review

::: callout-note
## Chat:

What would you say to encourage them to start?
:::

## Learning objectives

::: incremental
-   Practice tracking our work in git
-   Understand what makes code "good"
-   Understand the principles of "tidy data"
-   Use tidyverse packages (`dplyr` and `tidyr`) to work with data in R.
-   Identify how to apply tidy tools to your colloqium project.
:::

## GitHub practice

Create a branch for today's work in your workshop repo.

## Discussion: What makes code "good"?

Breakout rooms (5 minutes) to discuss, and then report back to the group.

## What makes code "good"?

Suggestions:

::: incremental
-   Readability
-   Reproducibility
-   Accuracy
-   Speed/efficiency
:::

## What makes code "good"?

Suggestions:

-   **Readability**
-   **Reproducibility**
-   Accuracy
-   Speed/efficiency

## Readable code

From [the Carpentries lab](https://carpentries-lab.github.io/good-enough-practices/03-software.html)...

::: incremental
-   Use comments to explain decisions
-   Break code into modules (covered next session)
-   Avoid repetition wherever possible (covered next week)
-   Make dependencies clear
:::

## Reproducible code

From [the Carpentries lab](https://carpentries-lab.github.io/good-enough-practices/03-software.html)...

::: incremental
-   Avoid using commenting out lines to control code
-   Use a test data set
-   Use version control (like GitHub!)
-   Keep track of your software environment
:::

## Good enough practices

[See the paper here!](http://github.com/swcarpentry/good-enough-practices-in-scientific-computing/)

# What is "tidy data"?

[Lowndes and Horst say it so beautifully.](https://docs.google.com/presentation/d/1N7hKepabvl9OrHjvGJWPjUsfzVdB5xzV5AsFndgSwms/edit#slide=id.p)

## The [tidyverse](https://www.tidyverse.org/)

[![](tidyverse.png)](https://www.tidyverse.org/)

## The "tidyverse"

::: incremental
-   ‚ú® Common structure and syntax
-   ‚ú® Emphasize user readability
-   ‚ú® Friendly documentation
-   ‚ú® Updates rapidly
:::

## The "tidyverse"

::: incremental
-   ‚ÄºÔ∏è Extra installs over "base R"
-   ‚ÄºÔ∏è Very different syntax than "base R"
-   ‚ÄºÔ∏è Updates rapidly (can be a reproducibility challenge)
:::

## The "tidyverse"

::: incremental
-   üß≠ Only install/load the functions/packages you need
-   üß≠ Be aware that others may be unfamiliar; comment your code well
-   üß≠ Keep track of your package versions
-   üß≠ Software developers, keep an eye on changes!
:::

## Tidy data in R

Let's install some packages:

``` r
install.packages("dplyr") # dataframe manipulation
install.packages("tidyr") # "reshaping" data
install.packages("palmerpenguins") # open teaching dataset
```

<!-- ## Coding time: Data types in R -->

<!-- Key points: -->

<!-- -   Major data types in R include characters, integers, double (numeric), Boolean (T/F), and factors. -->

<!-- -   Common tabular formats are `data.frame` or `tibble` -->

<!-- -   You can perform "vectorized" operations on whole vectors (or columns) at once. -->

<!-- -   Missing data are handled as `NA`s. -->

## Coding time: `dplyr`

Core `dplyr` verbs:

-   `select` pulls columns
-   `filter` pulls rows based on values
-   `mutate` adds or modifies a column
-   `group_by` + `summarize` calculates group-wise summary statistics
-   `*_join` functions combine data frames based on matching columns

## A note on pipes

-   Chain functions together into "paragraphs"
-   `%>%`: older, included in `dplyr` (ultimately depends on `magrittr`)
-   `|>`: included in base R as of 4.1.0

## Coding time: `tidyr`

Key `tidyr` manipulations:

-   `pivot_longer` turns *columns names* into *row values*
-   `pivot_wider` creates new columns based on the values of a given field.

::: callout-note
Data should be as long as is reasonable (but not longer)!
:::

## Coding time: finding the right function

-   `?tidyr::pivot_wider` and index pages
-   More ways of getting help: see the [Getting Help](../11-getting-help/slides.html) section!

## More git practice

Work through the steps to synchronize the changes you've made today with GitHub.

## More git practice

Work through the steps to synchronize the changes you've made today with GitHub.

::: {.callout-tip collapse="true"}
## Command-line instructions

`git add <your script name>`

`git commit`

`git push`
:::

## Your colloqium project

-   Between now and Thursday, revisit the code in your colloquium project.
-   Identify any sections of the code that could be improved based on the conversations and tools we covered today.
-   Make those changes, if you have the skills. Otherwise, take notes and we will talk more on Thursday.

## References

```         
Greg Wilson, Jennifer Bryan, Karen Cranston, Justin Kitzes, Lex Nederbragt, and Tracy K. Teal: "Good Enough Practices for Scientific Computing". http://github.com/swcarpentry/good-enough-practices-in-scientific-computing/, 2016.
```

```         
Wallace, E..W.J., Meynert, A., Zielinski. T., Romanowski. A., et. al., (2022). Good Enough Practices in Scientific Computing: A Lesson (Version 0.1.0). https://doi.org/tbc; also https://github.com/carpentries-lab/good-enough-practices/.
```
