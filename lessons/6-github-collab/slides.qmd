---
title: "Collaborate With GitHub"
subtitle: "Session 6"
date: "2024-09-19"
date-format: long
format:
  uaz-revealjs:
    reference-location: document
    link-external-newwindow: true
    chalkboard: true
    logo: "../../logo.png"
    footer: "[Reproduciblity & Data Science in R](../../index.html)"
    theme: "fix-mermaid.scss"
bibliography: references.bib
---

## Review

::: callout-note
## Word Bank

repo \| commit \| remote \| push \| pull \| add
:::

::: incremental
1.  A collection of files tracked by git
2.  A snapshot of the state of a repository
3.  `git` \_\_\_ is used to tell git to track a file
4.  For example, a repo on GitHub
5.  `git` *\_\_\_\_* is used to synchronize changes on your computer with a remote
:::

## Review

What difficulties did you have while putting your repo on GitHub?

## Collaborating with GitHub

![](github-diagram-bryan.png){fig-align="center" width="671"}

::: aside
Figure 2 from [@bryan2018]
:::

::: notes
A GitHub repo can be used to coordinate collaboration

If two people have permissions, both can push changes to the repo

Ask for a volunteer and give them permission to push to a repo
:::

## Example repo

-   Everyone practice cloning this example repo as a new RStudio project: <https://github.com/cct-datascience/repro-workshop-demo> [^1]

-   Need **one** volunteer to edit the README.md and practice commit + push

## Dealing with Conflicts

-   What happens when two people make conflicting edits to a file and push them?

-   Creates a *merge conflict*

    ![](push_error.png)

## Ok, try `git pull`

![](pull_error.png)

## Merge, rebase, fast-forward??

-   These are alternative ways to deal with conflicts---we won't get into the details

-   For now, we recommend you stick with the "merge" option

. . .

Use:

``` bash
git config pull.rebase false
```

Or, if you want to set this option for all future repos too

``` bash
git config --global pull.rebase false
```

## Fixing a Merge Conflict

![](merge_conflict.png)

-   Resolve the conflict however you want (i.e. keep one of the two sections)

-   Delete all lines with `<<<<<<<`, `>>>>>>>`, or `=======`

-   Save and commit

::: notes
Let's have a round of applause for our volunteer!
:::

## Avoid merge conflicts by working on branches

Each person works on a "branch"---an independent series of commits that can be merged back into the "main" branch.

```{mermaid}
gitGraph
   commit
   commit
   branch person_1
   commit
   commit
   commit
   checkout main
   branch person_2
   commit
   commit
   checkout main
   merge person_1
   merge person_2
   commit
       
```

## Working on a Branch

-   Make a new branch using RStudio's Git pane (for this demo, use your name)

-   Commit changes and push to your branch

-   View changes on GitHub

## Pull Requests

A request to merge changes into the main branch

-   Need another volunteer to share screen and be guided through making a pull request

-   This time, everyone can follow along!

## Forks {.smaller}

::: columns
::: {.column width="40%"}
What if you don't have permission to push to a GitHub repo but you want to contribute?\

\
Make a fork!

![](fork_btn.png){fig-align="center"}
:::

::: {.column width="60%"}
![](fork-and-clone.jpg){fig-align="center" width="627"}
:::
:::

::: notes
Since you can't push to "upstream", you can make a connected copy on GitHub called a "fork"\
\
You can clone the fork and since you own it, you can push to it.

On GitHub, you can sync upstream changes with your fork and you can make pull requests to integrate changes on your fork into upstream.

That means you can contribute to *anything*!
(as long as it is a public repo)
:::

## Collaborating with Forks

To contribute to a repo you don't have push permission for:

1.  **Fork** the repo to your own GitHub
2.  **Clone** the fork to your local computer
3.  Make **commits** (ideally on a **branch**)
4.  Make a **pull request** to the upstream repo

::: callout-tip
Learn more, including handy `usethis` shortcuts: <https://happygitwithr.com/fork-and-clone>
:::

## Practice

::: callout-tip
## Exercise

In pairs, practice **forking** and **cloning** a demo repo you do *not* have permission to push to.
Make a new branch, make commits, and make a pull request to the upstream repo.
:::

::: notes
Encourage learners to use forking and cloning to explore and contribute to any code they can find on GitHub including R packages and research compendia.
:::

## Resources

<!--# TODO: add more resources for getting help with pull requests -->

-   [Forking and cloning](https://happygitwithr.com/fork-and-clone)

-   [Pull request helpers in `usethis`](https://usethis.r-lib.org/articles/pr-functions.html)

-   #git channel in UA Data Science Slack

## Your Tasks

-   For the next update to your colloquium project, practice using a branch and and pull request on GitHub

-   Clone a repo you do not have permission to push to without forking it and see what happens when you try to use `git push`

-   Fork and clone a repo on GitHub to explore it (e.g. a lab mate's code, a research compendium, your favorite R package)

## References

::: refs
:::

[^1]: [Read more about **GitHub organizations**](https://docs.github.com/en/organizations/collaborating-with-groups-in-organizations/about-organizations)
