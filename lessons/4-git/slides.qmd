---
title: "Version Control With `git`"
subtitle: "Session 4"
date: "2024-09-12"
date-format: long
format:
  uaz-revealjs:
    reference-location: document
    link-external-newwindow: true
    chalkboard: true
    logo: "../../logo.png"
    footer: "[Reproduciblity & Data Science in R](../../index.html)"
---

# Review

What are your questions from last session?

# Review

What stood out to you when you diagrammed your file system?

# Review {.smaller}

![](../3-shell/file-structure-example.png)

If your current working directory is `Users/kristinariemer/Dropbox/Documents`, what command could be used to change directory into the local Documents folder?

# Learning objectives

-   Understand the what and why of version control
-   Set up git on your computer
-   Create a git repository associated with an R project
-   Use git to track and record changes to a git repository
-   Use .gitignore to selectively exclude files from git.

## 

::: columns
::: {.column width="50%"}
[Version Control]{.r-fit-text}

Semi-automated system for tracking changes with unlimited "undo"
:::

::: {.column width="50%"}
![](phd_final.jpg){fig-align="center" width="449"}
:::
:::

## Why Learn Version Control?

-   Track development of research projects like a lab notebook

-   Keep project in sync across computers including HPC

-   Share and collaborate on projects in a clear and manageable way

## Git and GitHub for version control

-   Git: version control *on your computer*.

-   GitHub: connects your local Git to the cloud.

    -   Project management

    -   Collaboration

    -   Visual interface

    -   Optional, but we will be using it!

# Coding time: Git Setup

We installed git last week, so you should be ready to set it up!

``` {.bash filename="Shell"}
git config --global user.name "Your Name"
git config --global user.email "youremail@arizona.edu" 
# Use your GitHub associated email
```

# Coding time

-   General syntax: `git` `verb` `options`
-   Set up text editor choice:

```         
git config --global core.editor "vim" 
```

-   Use the `--help` flag to see options

# Git repositories

-   Git works with the unit of the *repository*
-   Repositories are folders
-   Good practice: repositories == .Rprojects

# Creating a git repository

You have options:

-   RStudio Wizard *when creating an R project*
-   `git init` in an *existing directory/R Project*
-   `usethis::use_git` in an *existing R Project*

## RStudio New Project Wizard

-   *Before* you create the directory...
-   File \> New R Project...

## RStudio New Project Wizard

![](new_proj_with_git.png)

## `git init`

-   Create a new directory (or R project) on your computer

## `git init`

![](new_proj_no_git.png)

## `git init`

-   Navigate to it on the command line
-   Run `git init` from the command line

## `git init`

![](new_proj_git_init.png)

## `usethis::use_git()`

-   Create a new R Project

## `usethis::use_git()`

![](new_proj_no_git.png)

## usethis::use_git()

-   Open the R Project
-   From inside the R project, run...

## `usethis::use_git()`

![](new_proj_usegit.png)

# Coding time

-   Create a new R project and initialize it as a git repo.
-   Use any of the 3 approaches we've just gone over.
-   Report back: how did it go?

# Coding time

-   Introduce `git status`

# Coding time

-   Introduce modifications to this repository
-   Try `git status` again

# Saving modifications: a two-step process

![](git-simple.png)

# Coding time

-   `git add`
-   `git commit --m "foo"`

# Adding multiple files to same commit

![](git-multiple.png)

# Coding time

-   Modify-add-commit cycle
-   `git diff`
-   `git restore` to reset saved changes to the last commit
-   `git reset HEAD\~` to (effectively) undo an add-commit cycle

# Coding time

-   Ignore files with `.gitignore`

# Takeaways

-   `git` handles keeping track of versions and changes
-   Initialize a git repo 3 ways, depending on the current state of your project
-   The core `git` workflow is the modify-add-commit cycle
-   `git` can travel backwards in time
-   Ignore files using `.gitignore`

# Homework

-   GitHub signup
    -   Create a [GitHub](https://github.com) account if you don't have one.
    -   Slack us your GitHub username!
-   Colloqium project
    -   Identify the folder you want to use for your colloqium project and turn it into a git repository.
    -   Take before and after screenshots.

# Resources

-   Friendly reminder of [Drop-in Hours, 9-10 on Tuesdays](https://datascience.cct.arizona.edu/drop-in-hours)!

# Resources: Git

-   [Software Carpentry Version Control with Git episode #2](https://swcarpentry.github.io/git-novice/02-setup)
-   [Software Carpentry Version Control with Git episode #3](https://swcarpentry.github.io/git-novice/03-create)
-   [Software Carpentry Version Control with Git episode #4](https://swcarpentry.github.io/git-novice/04-changes)
-   [Software Carpentry Version Control with Git episode #6](https://swcarpentry.github.io/git-novice/06-ignore)
-   [Software Carpentry Version Control with Git episode #5](https://swcarpentry.github.io/git-novice/05-history)
