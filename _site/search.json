[
  {
    "objectID": "instructor-notes.html",
    "href": "instructor-notes.html",
    "title": "Using the Shell",
    "section": "",
    "text": "Note\n\n\n\nThe primary purpose of this curriculum page is to help instructors teach the material. Tangential purposes include sharing content with potential workshop participants and other educators. While this page can be used by workshop participants to review materials or for self-guided learning, it is not optimally designed for those purposes."
  },
  {
    "objectID": "instructor-notes.html#workshop-overview",
    "href": "instructor-notes.html#workshop-overview",
    "title": "Using the Shell",
    "section": "Workshop Overview",
    "text": "Workshop Overview\n\nPurpose\nTo introduce CALS researchers to better practices for sharing their code and results, managing their projects, and improving reproducibility of their computational work. Learners who already use R and RStudio will get the most out of this workshop.\n\n\nInstructional objectives\n\nShare & collaborate\n\nLearn how to do version control for code and data files\nTools: shell, git & GitHub via the RStudio terminal pane\n\nManage & organize\n\nLearn how to organize projects and use coding better practices\nTools: RStudio projects\n\nRepeat & reproduce\n\nLearn to repeat coding tasks more effectively and refactor code to be more reusable and reproducible\nTools: base R\n\nClean & plot\n\nLearn to use tidyverse tools to modify and visualize data\nTools: dplyr/tidyr/ggplot2\n\nDocument & publish\n\nLearn how to write project READMEs and publish reports\nTools: markdown, Rmarkdown files, RPubs, RStudio Connect, GitHub\n\n\n\n\nGeneral structure\nThis workshop was originally taught as a series of 8 two-hour virtual sessions, meeting twice a week for four weeks. We have now added two sessions, such that the workshop series can extend for 8, 9, or 10 sessions.\nLesson 4 is an optional extension to explore the foundations of collaborating on GitHub, including forking, remotes, and pull requests. Lessons 6 thru 9 are now modular, meaning that they are independent of each other and can be mixed and matched depending on learner interest.\nRelatively small workshop size (&lt; 15) helped keep one-on-one troubleshooting manageable for two instructors.\nThe workshop format is primarily code-along, with some sessions that include more discussion and demonstration. We use R/RStudio for the entire workshop. Students should install R and RStudio prior to the first class."
  },
  {
    "objectID": "instructor-notes.html#lessons",
    "href": "instructor-notes.html#lessons",
    "title": "Using the Shell",
    "section": "Lessons",
    "text": "Lessons\n\nTable of contents\n\n\n\nLesson\nTheme\nTopic\n\n\n\n\n1\nShare & collaborate\nShell scripting\n\n\n2\nShare & collaborate\nVersion control with git\n\n\n3\nShare & collaborate\nDeveloping code on GitHub\n\n\n4 (optional)\nShare & collaborate\nCollaborating with GitHub\n\n\n5\nManage & organize\nProject management and coding best practices\n\n\n6 (modular)\nRepeat & reproduce\nIntermediate R programming I\n\n\n7 (modular)\nRepeat & reproduce\nIntermediate R programming II\n\n\n8 (modular)\nClean & plot\nData manipulation\n\n\n9 (modular)\nClean & plot\nData visualization\n\n\n10\nDocument & publish\nDocumentation\n\n\n\n\n\nLesson subheader definitions\n“Installation & materials” lists what needs to be installed for the lesson and provides links to all lesson materials used, which were mostly sourced from The Carpentries’ excellent content.\n“Review” suggests warm up activities to begin each session.\n“Modifications” details how we changed the lesson materials so that lessons worked together and fit the two hour lesson time limit. Includes what we left out, when order was changed, and when we did something different.\n“Teaching notes” provides information and tips about how we taught the material, including troubleshooting installation instructions.\n“Homework” adds optional exercises and tasks to reinforce lesson content and/or prepare for the next lesson.\n\n\n\nLesson 1\n\nTopic\nShell scripting\n\n\nObjective\nLearners should be comfortable with their file structure and navigating around it using command line commands in RStudio Terminal pane.\n\n\nInstallation & materials\n\nSlides\nmacOS git installation \nWindows git installation\nSoftware Carpentry Unix Shell episode #1\nSoftware Carpentry Unix Shell episode #2\n\n\nModifications\n\nUse terminal window within RStudio as command line interface\n\nStart with a brief overview of RStudio panes\nOnly need to use Terminal and Files tabs\nEmphasize that Files tab is analogous to file finder\n\nSkip all exercises, including “Nelle” example\nAt beginning of episode #2, explain file path using example from instructor’s file system; example diagram below\n\n\n\nCan also use example diagram for file system using instructor’s \n\n\n\n\nTeaching notes\n\nIf not already installed, learners should install R and RStudio\nNeed to install git initially for Windows users to have shell commands\n\nSeparate into 2 breakout rooms to install git/GitBash for Windows and Macs\nRestart RStudio after installation\nFor Windows, open RStudio Tools/Global Options/Terminal and make sure GitBash is selected\n\nDownload shell-lesson-data.zip to Desktop/ location; this won’t be referenced in later lessons\nEmphasize purposes for learning shell\n\nHelpful for using git and GitHub\nEasier to deal with installation problems\nUnderstanding file structure and file paths\n\nUnzipping shell-lesson-data.zip through point-and-click in the RStudio Files tab does not work consistently across machines; recommend unzipping on the command line with unzip\n\nOnce unzipped, have everyone share absolute file path to location of file\n\nIf there’s additional time, can also cover Software Carpentry Unix Shell episode #3\n\n\n\nHomework\nCreate diagram, with pen and paper or digitally, of their own file system.\n\n\n\n\nLesson 2\n\nTopic\nVersion control with git\n\n\nObjective\nLearners will practice how changes to code are tracked with version control and become familiar with command-line git within the RStudio IDE.\n\n\nInstallation & materials\n\nSlides\nSoftware Carpentry Version Control with Git episode #2\nSoftware Carpentry Version Control with Git episode #3\nSoftware Carpentry Version Control with Git episode #4\nSoftware Carpentry Version Control with Git episode #6\n(optional) Software Carpentry Version Control with Git episode #5\n\n\nReview\nAsk students to share their diagram of their file system. Warm up with the review question in slide deck.\n\n\nModifications\n\nNavigate to Desktop/ as a consistent location\nUse mkdir to make a new folder and name it pilot-analyses/\nUse RStudio interface to create a new/blank R file (rather than using the planets example)\nAdd R pseudocode or comments to blank R file\n\n\n\n\nTeaching notes\n\npilot-analyses/ will be the locally created repository\nWhen setting up git for the first time, remind students to use the same email as their existing GitHub account or to select an email that will be used for GitHub\nReinforce using cd and ls -al to move around the file structure and see contents\nShow how git restore can be used to undo a saved file\nHEAD is the snapshot of your last commit\nCan use git reset HEAD~ to undo the last commit and unstage everything—the equivalent of reversing the git add and git commit commands.\n\n\n\nHomework\nCreate a GitHub account if you don’t already have one. For an extra challenge, identify an existing folder and turn into a repository.\n\n\n\n\nLesson 3\n\nTopic\nDeveloping code on GitHub\n\n\nObjective\nLearners will share their local repository on GitHub and learn how to sync some files while ignoring others systematically. Learners will practice developing new code on branches.\n\n\nInstallation & materials\n\nSlides\nSoftware Carpentry Version Control with Git episode #6\nGitHub authentication with PAT using Jenny Bryan’s Git book chapter 9 or with ssh using Software Carpentry Version Control #7, section 3\nSoftware Carpentry Version Control with Git episode #7\nSoftware Carpentry branching add-on\n\n\nReview\nIf anyone turned a folder into a repository, share how that went. Ask students to navigate to previous repository, add new R file, and practice an add-commit cycle.\n\n\nModifications\n\nProvide a large .csv file, ask students to move into pilot-analyses repo within a data folder using cd and filepaths\nUse RStudio interface to create a new text file, save as .gitignore; explore how to suppress a specific file, files within a folder, and specific kinds of file extensions\nStart remotes section with SSH setup, one of two options:\n\nSSH method. More difficult to explain and set up, but doesn’t expire and applies to all repos.\nPAT method. Easier to set up, but requires additional R packages and is recommended to set to expire.\n\nProceed to connecting local repository to GitHub repository; GitHub repository must be empty\nCreate new repository entitled repro-DS-workshop on GitHub; can include README, license, and .gitignore. Clone locally to wherever course materials are organized\nShow how checking out a branch literally changes the local files\n\n\n\n\nTeaching notes\n\nPractice another add-commit cycle after creating the .gitignore\nIf ssh -T git@github.com doesn’t work, could be an issue with OpenSSH. Try a different ssh flavor:\n\nwhich -a ssh\nUse a non OpenSSH version, e.g., /usr/bin/ssh -T git@github.com\n\nIntroduce the add-commit-push cycle\n\n\n\nHomework\nIf Lesson 4 will not be taught, skim the Analyses section of tidyverse R style guide. What practice or guideline was new to you?\nOtherwise, connect personal repository to GitHub.\n\n\n\n\nLesson 4\n\nTopic\nCollaborating with GitHub\n\n\nObjective\nLearners will fork and clone a repository on GitHub and use branches to open pull requests.\n\n\nInstallation & materials\n\nSlides\nWorkshop repository\nSoftware Carpentry Version Control with Git episode #8\n\n\nReview\nIf anyone connected a local repository to GitHub, share how that went. Ask students to navigate to previous repository, amend an existing file, and practice an add-commit-push cycle.\n\n\nModifications\n\nThe only part of #8 that was taught was cloning a forked repository. Ask students to fork an instructor-created repository, then clone locally. This will be the repo for downstream files.\nUse git remote add upstream xxxx to connect repo to upstream. If time permits, demonstrate a pull request (PR).\nShare diagram of relationships between the remotes (upstream and origin) and local\nDemonstrate pull requests on GitHub\nShow how distinct units of work can be separately submitted via branches\n\n\n\n\nTeaching notes\n\nHave students fork a cct-datascience repo as an example of a real research compendium\nEasy to check on learner progress by looking for who has and hasn’t forked repo\n\n\n\nHomework\nSkim the Analyses section of tidyverse R style guide. What practice or guideline was new to you?\nAlso, explore the upstream cct-datascience repo. What practices do you notices that are new or different from your own?\n\n\n\n\nLesson 5\n\nTopic\nProject management and coding best practices\n\n\nObjective\nLearners will learn about and practice managing their projects using file structure and RStudio projects, and about current best practices and style guides for R coding. (optional) They will also get more comfortable with version control through learning and doing pull requests and reinforcement of git cycle.\n\n\nInstallation & materials\n\nSlides\nSoftware Carpentry Introduction to R and RStudio episode\nSoftware Carpentry Project Management with RStudio episode\nSoftware Carpentry Best Practices for Writing R Code\n\n\nReview\nIf lesson 4 was covered, do exercise asking participants to identify who owns the following repos and where they are located, for upstream, origin, and local repos. See example diagram below:\n\nIf lesson 4 was not covered, do the review section in lesson 4.\n\n\nModifications\n\nRStudio\n\nCover only “Introduction to RStudio” section unless learners need a refresher on R\nAdditional keyboard shortcuts from RStudio’s reference list (and mention command palette cmd + shift + P)\n\nProject management\n\nDo “Best practices for project organization” including yellow “Tip: Good Enough Practices for Scientific Computing” box\nThen “A possible solution” section about R projects\nInclude splitting scripts up into modular chunks to promote reproducibility and avoiding rerunning time-intensive data cleaning\n\nCoding best practices\n\nCondensed into a single slide\n\n\n\n\n\nTeaching notes\n\nAfter introducing concept of research compendiums, walk through turning their local copy of forked repo into an R project\nTo practice git, add and commit new *.Rproj, then push to remote repo\nInclude how R projects promotes reproducibility, by being able to save scripts and close them or entire project\nTest code in forked cct-datascience repo; are the scripts reproducible? Which characteristics contribute (or not) to its reproducibility?\nIf lesson 4 was skipped, add, commit, push these changes and then walk through opening a pull request to the upstream (instructor’s) repo\n\nThis is another nice way to keep track of learners’ progress\n\n\n\n\nHomework\nApply one or more of the organizing principles of a research compendium to an existing research project.\n\n\n\n\nLesson 6\n\nTopic\nIntermediate R programming I\n\n\nObjective\nLearners will learn how to make their R code more reproducible using functions and control flow approaches.\n\n\nInstallation & materials\n\nSlides\nData Carpentry for Biologists functions lecture\nData Carpentry for Biologists conditionals lecture\n\n\nReview\nAsk to share cleaning up of example script, their own script, or their research project folder from lesson 5.\n\n\nModifications\n\nFor functions lecture, had them do only the “Use and Modify” exercise\nFrom conditionals lecture, only did “if statements” section\nFrom latter, only did “Basic If Statements” #2 exercise\nAdded on brief explanation of ifelse, using the example of ifelse(length == 5, \"correct\", \"incorrect\")\nMention case_when from dplyr for more complicated if & else steps\n\n\n\n\nTeaching notes\n\nBefore doing functions and conditions, demonstrate updating local cct-organization repo from upstream after adding a commit to the upstream\nCreate new R script for functions content, and another new R script for control flow (ifelse and for loops) content. Put both scripts into repro-DS-workshop repo\nMention functions are often used with for loops or apply statements\nAfter functions, mention consistent order of sections in scripts; example is libraries, read in data, functions, executing functions\nInclude real world examples of if and ifelse statements to motivate their use, especially for checking if files already exist\nDemonstrate making a new branch and opening up a pull request in their repro-DS-workshop repo at the end of each set of material; can merge pull request\n\n\n\nHomework\nCreate a plan for applying these skills to their own research projects. Can apply different parts to different projects, or more integratively to one single project. Some possibilities:\n\nTurn the project folder for one of your current research project into a git/GitHub repo and/or R project\nModify an R script to use functions, if/for loops, or format code according to best practices\nImprove file and folder organization for project or your entire computer!\n\n\n\n\n\nLesson 7\n\nTopic\nIntermediate R programming II\n\n\nObjective\nLearners will learn how to make their R code more reproducible using for loops and the apply family of functions.\n\n\nInstallation & materials\n\nSlides\nData Carpentry for Biologists for loop lecture \nData Carpentry for Biologists iteration without loops lecture? \n\n\n\nReview\nCan share their plans for apply skills to their research. Lead optional discussion on when to use base R vs. tidyverse packages/functions.\n\nModifications\n\nFor for loops lecture:\n\nAt “Do Tasks 3-4…”, do “Basic For Loop” exercises #2 & #3\nSkip sections “Looping over multiple values” and “Looping with functions”\nStop at “Looping over files” due to zip download issues\n\nFor apply lecture:\n\nDo “Size Estimates With Maximum” exercise\nDo “Size Estimates Vectorized 2” exercise\nStop after first section in “Other apply functions (optional)” section\n\n\n\n\n\nTeaching notes\n\nCreate new R script for these materials. Put script into repro-DS-workshop repo\nEmphasize using for loops using index or non-index methods. Index can be useful for reducing memory use and for storing results\nIf time, demonstrate combining if and for\n\n\n\nHomework\nIdentify a script from a research project that could benefit from a for loop, apply, conditional, or function.\n\n\n\n\nLesson 8\n\nTopic\nData manipulation\n\n\nObjective\nLearn how to reproducibly clean, summarize, and reorganize dataframes using tidyverse R packages.\n\n\nInstallation & materials\n\nSlides\nInstall R packages ‘dplyr’, ‘tidyr’, ‘readr’\nData carpentry R ecology revamp episode #2\nData carpentry R ecology revamp episode #3\n\n\nModifications\n\nExplain data.frames and types of vectors, but skip over exercises on coercion and factors\nClarify difference between == and %in%, including that no warning or error given for == that induces vector recycling\nEnd with saving script and doing an add-commit-push cycle to sync local repository with GitHub repository\n\n\n\n\nTeaching notes\n\nHave students install each package separately rather than as the tidyverse—can be important to know which functions come from which packages\n\n\n\nHomework\nNone\n\n\n\n\nLesson 9\n\nTopic\nData visualization\n\n\nObjective\nLearners will learn how to build figures using ggplot and practice making multiple plots (for loops, faceting).\n\n\nInstallation & materials\n\nSlides\nInstall ‘ggplot2’\nData Carpentry R ecology lesson - #4 ‘Data visualization’\n\n\nModifications\n\nMake a time series plot, but with mean weights across a particular species (species_id == \"DM\")\n\nReinforce the group_by() and summarize() functions from an earlier lesson\nDemonstrate piping datasets into ggplot()\n\nChallenge students to filter by and plot all members of the genus Dipodomys; what are some choices for differentiating between species?\n\nStudents may have used color = species_id within aes()\nShow facet_wrap() as an option, particularly with scales = 'free_y'\n\nAdditional challenge of adding a third factor of sex (in addition to year and species_id)\n\nShow facet_grid() as an option, with species by row and sex by column\nWhat are the advantages and disadvantages of plotting together versus separately?\n\nFinal note of caution: it can be important to depict the number of samples that when into the sample mean and sd\n\nCan be added with geom_text() to the graph itself\nOr as a color axis when combined with facet_grid()\n\n\n\n\n\nTeaching notes\n\nStudents may be familiar with the basics of ggplot already, this portion of the lesson emphasizes how to build plots and customize viewing options to maximize students’ own understanding of their data (as opposed to how to make publication-quality graphs)\nIf ‘Intermediate R programming II’ was taught, challenge students to create plots of mass over time for each species within a genus using a for loop. Saving out plots with different names will be an extra challenge and require paste0().\nConsider replacing data visualization with cleaning and joining data (Data carpentry R ecology revamp episode #4), with more hands on work in three groups.\n\n\n\nHomework\nFor loop for plots of mass over time of each species within a genus.\n\n\n\n\nLesson 10\n\nTopic\nDocumentation\n\n\nObjective\nLearners will understand the purpose of a README and practice using Rmarkdown to document and publish reports. \n\n\nInstallation & materials\n\nSlides\nInstall R packages rmarkdown and knitr\nData Carpentry for Biologists knitr lecture\n\n\n\nReview\nGo through exercise for plotting using for loop\n\nModifications\n\nNo lesson materials for first section about markdown\nFor Rmarkdown lesson:\n\nSimplify text used to spend less time typing\nSave .Rmd file in newly created docs folder (to demonstrate project management)\nSkip “Citations” section\nStop at “R Presentations” section\n\nNo lesson materials for third section about READMEs \n\n\n\n\nTeaching notes\n\nMarkdown\n\nBasis of a lot of documentation: READMEs, R Markdowns, hackmd, GitHub issues\nPlain text formatting, can be converted to HTML\n\nCompare file in RStudio to GitHub render\nTransect runs README as example\nSupposed to be able to read plain text version easily\n\nBeen around for almost two decades\nSimple and easy to read and format\nGUI vs. command line type approach\n\nCan do same things in Word/Google Doc but is more explicit and less point and click\nAlso better for version control\n\n\nR Markdown\n\nBetter documentation of code\nUse cases: writing a lot of comments on code, other people will be looking at code/outputs, exploratory work with notes, write manuscripts\nBasis is markdown, but combines with chunks of R code\nLiterate programming = combining text and code\nCreate new branch called docs for this and README\nDo DC lesson\nCan publish these online (besides GH)\n\nRPubs or UA’s RStudio Connect\nPush button in RStudio, point this out\n\nQuarto is next generation of R Markdown\n\nREADMEs\n\nR Markdown good for describing code and data within a script\nREADMEs are good for documenting an entire project (GitHub repo)\nComes from software engineering\nFile that introduces and explains a project\nShow example: https://github.com/cct-datascience/rangeland-restore\n\nLook at raw\n\nContains info about other files and folders in a repo\nAlso package versions and installation instructions, how to contribute\nShould go in main folder of project\nUsually a plain text file\nName is in all upper case\nGitHub encourages use of README\n\nAutomatically asks to include one when creating new repo\nAutomatically displays one on repo main page if there is one\n\nNeed to be updated regularly during project\nIf time, create README in repro-DS-workshop repo listing project folder and file names with descriptions\n\nGitHub issues\n\nGitHub markdown specifically: https://guides.github.com/features/mastering-markdown/\nWalk through use of GitHub issues, including markdown check box list\nExample: https://github.com/genophenoenvo/neon-datasets/issues\nForked repos don’t have issues included by default, change in repo settings\n\nGitHub project boards & wikis\n\nLike kanban board\nUses GH issues, in different categories\n\n\n\n\nHomework\nNone"
  },
  {
    "objectID": "instructor-notes.html#post-lesson-followup-sessions",
    "href": "instructor-notes.html#post-lesson-followup-sessions",
    "title": "Using the Shell",
    "section": "Post-lesson followup sessions",
    "text": "Post-lesson followup sessions\nIt is optional but encouraged to include one or two followup sessions in this workshop series after the lessons focused on content. These can be used to review material, such as the Jeopardy game that we created. It can be used to cover a small amount of other material, such as this session we did on “Tips for getting your code to work” (see slides). And it can be used for attendees to present the work that they’ve done as demos or “show and tells”."
  },
  {
    "objectID": "instructor-notes.html#technical-notes",
    "href": "instructor-notes.html#technical-notes",
    "title": "Using the Shell",
    "section": "Technical notes",
    "text": "Technical notes\n\nOne early problem occurred when students were unsure of which ‘Documents’ or ‘Desktop’ folder they were saving to, which made navigating filepaths tricky. Note that on some PCs, the Windows OneDrive backup folders are saved to by default, but students should navigate to C:/Users/username/Documents or C:/Users/username/Desktop\nR packages sometimes did not install properly.\n\nOne reason was that some usernames included special characters, which were not interpreted correctly.\nAnother included R being installed on a remote server, rather directly on the local machine"
  },
  {
    "objectID": "instructor-notes.html#acknowlegements",
    "href": "instructor-notes.html#acknowlegements",
    "title": "Using the Shell",
    "section": "Acknowlegements",
    "text": "Acknowlegements\nThanks to Teresa Mourad and Fred Abbott of the Ecological Society of America, who invited us to teach the first half of the Critical Skills to Scale Up Ecology workshop, which planted the seed for developing this curriculum. We also appreciate the inaugural class of this workshop series at UA in Spring 2022, who inspired deeper conversation about why and how to teach this course. Finally, a huge thanks to The Carpentries organization for generating all of the volunteer-created content we used here, and for training both of us in pedagogy."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Reproducibility & Data Science in R Curriculum",
    "section": "",
    "text": "Lesson\nTheme\nTopic\nNotes\n\n\n\n\n1\nShare & collaborate\nShell scripting\nIntro, install git (windows), basic shell\n\n\n2\nShare & collaborate\nVersion control with git & GitHub\nBasic git with shell, then into RStudio to connect to GitHub (e.g. with usethis::use_github()\n\n\n3\nShare & collaborate\nCollaborating with GitHub\nbranches & PRs & forks maybe\n\n\n4\nContinued learning\nGetting Help with Code\nGH Issues & discussions. reprex package & concept (this is not 2 hrs)\n\n\n5\nManage & organize\nProject management and coding best practices\n(is this 2 hours?)\n\n\n6 (modular)\nRepeat & reproduce\nIntermediate R programming I\n\n\n\n7 (modular)\nRepeat & reproduce\nIntermediate R programming II\n\n\n\n8 (modular)\nClean & plot\nData manipulation\n\n\n\n9 (modular)\nClean & plot\nData visualization\n\n\n\n10\nDocument & publish\nDocumentation"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "slides.html#some-slides",
    "href": "slides.html#some-slides",
    "title": "Untitled",
    "section": "Some slides",
    "text": "Some slides\n\n\n[1] 6"
  },
  {
    "objectID": "lessons/1-shell/slides.html#what-is-reproducibility-why",
    "href": "lessons/1-shell/slides.html#what-is-reproducibility-why",
    "title": "Reproducibility & Data Science in R",
    "section": "What is Reproducibility & Why?",
    "text": "What is Reproducibility & Why?\nReproducibility is...\n\n\nI want my work to be reproducible because..."
  },
  {
    "objectID": "lessons/1-shell/slides.html#the-whole-picture",
    "href": "lessons/1-shell/slides.html#the-whole-picture",
    "title": "Reproducibility & Data Science in R",
    "section": "The Whole Picture",
    "text": "The Whole Picture\n\n\n\n\n\n\nA (usually fiction) story:\n\n\nYou read a great paper and think “I bet I could apply their analysis methods to my work!” You click a DOI link in their Data Availability section that they definitely have. It opens to a web page where you can download a folder with R code, data, and documentation about the code and data. The page also has detailed information about how to cite the code and data. You open the folder in R Studio and you are prompted to install all the packages you need to run the code. You open the analysis code script and hit “run”. All the code runs perfectly with no errors, creating all the figures, tables, and statistics used in the paper. You scroll through the well-formatted R code and understand from the authors’ comments exactly what the code does and how to adapt it to your work.\n\n\n\n\nWe want to help you make this story a reality for someone else!"
  },
  {
    "objectID": "lessons/1-shell/slides.html#syllabus-course-materials",
    "href": "lessons/1-shell/slides.html#syllabus-course-materials",
    "title": "Reproducibility & Data Science in R",
    "section": "Syllabus & Course Materials",
    "text": "Syllabus & Course Materials"
  },
  {
    "objectID": "lessons/1-shell/slides.html#installation",
    "href": "lessons/1-shell/slides.html#installation",
    "title": "Reproducibility & Data Science in R",
    "section": "Installation",
    "text": "Installation\n\nmacOS comes with a shell (usually Bash or Zsh) built-in\nWindows need to install GitBash (includes Bash shell and git, which we will use later)"
  },
  {
    "objectID": "lessons/1-shell/slides.html#syntax-of-a-shell-command",
    "href": "lessons/1-shell/slides.html#syntax-of-a-shell-command",
    "title": "Reproducibility & Data Science in R",
    "section": "Syntax of a shell command",
    "text": "Syntax of a shell command"
  },
  {
    "objectID": "lessons/1-shell/slides.html#pwdprint-working-directory",
    "href": "lessons/1-shell/slides.html#pwdprint-working-directory",
    "title": "Reproducibility & Data Science in R",
    "section": "pwd—print working directory",
    "text": "pwd—print working directory\n\npwd\n\n/Users/ericscott/Documents/GitHub/repro-data-sci/lessons/1-shell"
  },
  {
    "objectID": "lessons/1-shell/slides.html#homework",
    "href": "lessons/1-shell/slides.html#homework",
    "title": "Reproducibility & Data Science in R",
    "section": "Homework",
    "text": "Homework\n\nDiagram your home directory file structure including top 3 most used folders"
  }
]